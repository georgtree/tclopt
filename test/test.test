package require tcltest
namespace import ::tcltest::*

package require tclopt
namespace import ::tclopt::*

set epsilon 1e-6
proc matchList {expected actual} {
    variable epsilon
    set match true
    set len [llength $expected]
    for {set i 0} {$i<$len} {incr i} {
        set exp [lindex $expected $i]
        set act [lindex $actual $i]
        if {(abs($act-$exp) > $epsilon) || (abs($act-$exp) > $epsilon)} {
            set match false
            break
        }
    }
    return $match
}
customMatch mtchLst matchList

### Auxilary procedures tests

test lists2arraysProcTest-1 {test of lists2arrays procedure} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
} -body {
    catch {::tclopt::Lists2arrays [list xVar yVar] [list $x]} errorStr
    return $errorStr
} -result "Length of varName list '2' must be equal to length of lists list '1'" -cleanup {
    unset x y errorStr
}

test lists2arraysProcTest-2 {test of lists2arrays procedure} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
} -body {
    catch {::tclopt::Lists2arrays [list xVar yVar] [list $x] string} errorStr
    return $errorStr
} -result "Type 'string' must be int or double" -cleanup {
    unset x y errorStr
}

test lists2arrayProcTest-1 {test of lists2array procedure} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
} -body {
    catch {::tclopt::List2array $x string} errorStr
    return $errorStr
} -result "Type 'string' must be int or double" -cleanup {
    unset x y errorStr
}

test array2listProcTest-2 {test of array2list procedure} -setup {
    set x [list 1 2 3 4 5]
    ::tclopt::Lists2arrays [list a] [list $x]
} -body {
    catch {::tclopt::Array2list $a 5 string} errorStr
    return $errorStr
} -result "Type 'string' must be int or double" -cleanup {
    unset x errorStr
}

test array2listProcTest-1 {test of arrays2lists procedure} -setup {
    ::tclopt::NewArrays [list a b v] [list 3 3 3]
} -body {
    catch {::tclopt::Arrays2lists [list xVar yVar vVar] [list $a $b] [list 3 3 3]} errorStr
    return $errorStr
} -result "Length of varName list '3' must be equal to length of array list '2'" -cleanup {
    unset errorStr
    ::tclopt::DeleteArrays [list $a $b $v]
}

test array2listProcTest-2 {test of arrays2lists procedure} -setup {
    ::tclopt::NewArrays [list a b v] [list 3 3 3]
} -body {
    catch {::tclopt::Arrays2lists [list xVar yVar vVar] [list $a $b] [list 3 3 3] string} errorStr
    return $errorStr
} -result "Type 'string' must be int or double" -cleanup {
    unset errorStr
    ::tclopt::DeleteArrays [list $a $b $v]
}

test array2listProcTest-2 {test of arrays2lists procedure} -setup {
    ::tclopt::NewArrays [list a b v] [list 3 3 3]
} -body {
    catch {::tclopt::Arrays2lists [list xVar yVar vVar] [list $a $b $v] [list 3 3]} errorStr
    return $errorStr
} -result "Length of varName list '3' must be equal to length of lengths list '2'" -cleanup {
    unset errorStr
    ::tclopt::DeleteArrays [list $a $b $v]
}

test newArraysProcTest-1 {test of newArrays procedure} -body {
    catch {::tclopt::NewArrays [list a b v] [list 3 3]} errorStr
    return $errorStr
} -result "Length of varName list '3' must be equal to length of lengths list '2'" -cleanup {
    unset errorStr
}

test newArraysProcTest-2 {test of newArrays procedure} -body {
    catch {::tclopt::NewArrays [list a b v] [list 3 3] string} errorStr
    return $errorStr
} -result "Type 'string' must be int or double" -cleanup {
    unset errorStr
}

test deleteArraysProcTest-1 {test of deleteArrays procedure} -body {
    catch {::tclopt::DeleteArrays [list a b v] string} errorStr
    return $errorStr
} -result "Type 'string' must be int or double" -cleanup {
    unset errorStr
}


### mpfit tests

test MpfitClassTest-1 {test procedure of optimization of linear function without constraints} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 1.0]
    set par1 [ParameterMpfit new b 1.0]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0 $par1
} -body {
    $optimizer run
} -result "bestnorm 2.756284982812983 orignorm 12304.732640816545 status {Convergence in chi-square value} niter 3 nfev\
8 npar 2 nfree 2 npegged 0 nfunc 10 resid {0.4665000078783141 0.8131242968301778 -0.5829829524838808 0.2852768459629816\
0.15536884846509832 -0.3049449011807021 0.06378629589861731 -0.36286492015767785 0.4617857350880605 -0.995049256495241}\
xerror {0.02221017630949747 0.018937556387763524} x {3.209965716826263 1.7709542026825729} debug {} covar\
{0.0004932919316989627 -3.4359717592592004e-5 -3.4359717592592004e-5 0.000358631041939723}" -cleanup {
    $par0 destroy
    $par1 destroy
    $optimizer destroy
    unset x y ey pdata optimizer par0 par1
    rename linfunc ""
}
# Original implementation results
# *** testlinfit status = 1
#   CHI-SQUARE = 2.756285    (8 DOF)
#         NPAR = 2
#        NFREE = 2
#      NPEGGED = 0
#      NITER = 3
#       NFEV = 8

#   P[0] = 3.209966 +/- 0.022210     (ACTUAL 3.200000)
#   P[1] = -1.770954 +/- 0.018938     (ACTUAL 1.780000)

test MpfitClassTest-2 {test procedure of optimization of quadratic function without constraints} -setup {
    proc quadfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            lappend fvec [= {($yVal-[@ $xall 0]-[@ $xall 1]*$xVal-[@ $xall 2]*$xVal*$xVal)/$eyVal}]
        }
        return [dcreate fvec $fvec]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297e-01 1.3416969 1.3757038E+00 -1.3703436 4.2581975e-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 2.3095947e+01 2.6449392e+01 1.0204468E+01 5.40507 1.5787588e+01 1.6520903e+01 1.5971818e+01 4.7668524\
                   4.9337711 8.7348375]
    set ey [list 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 1.0]
    set par1 [ParameterMpfit new b 1.0]
    set par2 [ParameterMpfit new c 1.0]
    set optimizer [Mpfit new -funct quadfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0 $par1 $par2
} -body {
    $optimizer run
} -result "bestnorm 5.679322734138911 orignorm 37713.946567473744 status {Convergence in chi-square value} niter 3 nfev\
10 npar 3 nfree 3 npegged 0 nfunc 10 resid {0.9416066896846864 0.24222302380049854 -0.9548933801118942\
1.1106075168937368 -0.47348953048699016 0.3347776684214754 -1.0977392040537026 0.24591600443900288 0.5059657277266325\
-0.8549744891599742} xerror {0.09751164406181488 0.054801947803657595 0.05443274553343348} x {4.703829090142608\
0.06258628519875681 6.163087225566785} debug {} covar {0.009508520727638078 0.000363483171647716 -0.004030099807881548\
0.000363483171647716 0.0030032534830748115 -0.0004734465588048391 -0.004030099807881548 -0.0004734465588048391\
0.0029629237863075227}" -cleanup {
    $par0 destroy
    $par1 destroy
    $par2 destroy
    $optimizer destroy
    unset x y ey pdata optimizer par0 par1 par2
    rename quadfunc ""
}
# Original implementation results
# *** testquadfit status = 1
#   CHI-SQUARE = 5.679323    (7 DOF)
#         NPAR = 3
#        NFREE = 3
#      NPEGGED = 0
#      NITER = 3
#       NFEV = 10

#   P[0] = 4.703829 +/- 0.097512     (ACTUAL 4.700000)
#   P[1] = 0.062586 +/- 0.054802     (ACTUAL 0.000000)
#   P[2] = 6.163087 +/- 0.054433     (ACTUAL 6.200000)

test MpfitClassTest-3 {test procedure of optimization of quadratic function with one fixed parameter} -setup {
    proc quadfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            lappend fvec [= {($yVal-[@ $xall 0]-[@ $xall 1]*$xVal-[@ $xall 2]*$xVal*$xVal)/$eyVal}]
        }
        return [dcreate fvec $fvec]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297e-01 1.3416969 1.3757038E+00 -1.3703436 4.2581975e-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 2.3095947e+01 2.6449392e+01 1.0204468E+01 5.40507 1.5787588e+01 1.6520903e+01 1.5971818e+01 4.7668524\
                   4.9337711 8.7348375]
    set ey [list 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 1.0]
    set par1 [ParameterMpfit new b 0.0 -fixed]
    set par2 [ParameterMpfit new c 1.0]
    set optimizer [Mpfit new -funct quadfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0 $par1 $par2
} -body {
    $optimizer run
} -result "bestnorm 6.983587997089926 orignorm 38494.35736468919 status {Convergence in chi-square value} niter 3 nfev\
8 npar 3 nfree 2 npegged 0 nfunc 10 resid {0.2935025799701485 0.6929277066240758 -1.2653783993772993 1.055649480089625\
-0.10456124983297066 0.709788999983445 -1.5813262674645312 0.29702574820958755 0.4958878220954983 -0.5935165008403898}\
xerror {0.09728580899995624 0.0 0.05374279195139135} x {4.696254299067177 0.0 6.172953600113339} debug {} covar\
{0.009464528632775967 0.0 -0.003972798869186824 0.0 0.0 0.0 -0.003972798869186824 0.0 0.0028882876867305355}" -cleanup {
    $par0 destroy
    $par1 destroy
    $par2 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 par2 optimizer
    rename quadfunc ""
}
# Original implementation results
# *** testquadfix status = 1
#   CHI-SQUARE = 6.983588    (8 DOF)
#         NPAR = 3
#        NFREE = 2
#      NPEGGED = 0
#      NITER = 3
#       NFEV = 8

#   P[0] = 4.696254 +/- 0.097286     (ACTUAL 4.700000)
#   P[1] = 0.000000 +/- 0.000000     (ACTUAL 0.000000)
#   P[2] = 6.172954 +/- 0.053743     (ACTUAL 6.200000)

test MpfitClassTest-4 {test procedure of optimization of gaussian function without constraints} -setup {
    proc gaussfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        set sig2 [= {[@ $xall 3]*[@ $xall 3]}]
        foreach xVal $x yVal $y eyVal $ey {
            set xc [= {$xVal-[@ $xall 2]}]
            lappend fvec [= {($yVal-[@ $xall 1]*exp(-0.5*$xc*$xc/$sig2)-[@ $xall 0])/$eyVal}]
        }
        return [dcreate fvec $fvec]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297e-01 1.3416969 1.3757038E+00 -1.3703436 4.2581975e-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list -4.4494256e-02 8.7324673e-01 7.4443483e-01 4.7631559 1.7187297e-01 1.1639182e-01 1.5646480 5.2322268\
                   4.2543168 6.2792623e-01]
    set ey [list 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.0]
    set par1 [ParameterMpfit new b 1.0]
    set par2 [ParameterMpfit new c 1.0]
    set par3 [ParameterMpfit new d 1.0]
    set optimizer [Mpfit new -funct gaussfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0 $par1 $par2 $par3
} -body {
    $optimizer run
} -result "bestnorm 10.35003196129402 orignorm 231.5337319086307 status {Convergence in chi-square value} niter 28 nfev\
139 npar 4 nfree 4 npegged 0 nfunc 10 resid {-1.0513418422715526 0.7855408029824684 -0.1591719970348312\
0.7716056139751757 -0.6348701753127879 -0.7411596196260082 2.127827285979557 0.7150067330901377 -1.3376413435157142\
-0.47579545836728143} xerror {0.2322349318512935 0.3954344774076113 0.07471490962927792 0.08999568304321699} x\
{0.4804433588338699 4.550752473146258 -0.06256246342568401 0.3974717357243806} debug {} covar {0.05393306357197494\
-0.04311191421319561 -0.0015901067733744695 -0.011515875954133913 -0.04311191421319561 0.15636842592263064\
0.008672077997269465 0.0006258000745328732 -0.0015901067733744695 0.008672077997269465 0.0055823177209111665\
0.0011685192745230502 -0.011515875954133913 0.0006258000745328732 0.0011685192745230502 0.008099222966415173}" -cleanup {
    $par0 destroy
    $par1 destroy
    $par2 destroy
    $par3 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 par2 par3 optimizer
    rename gaussfunc ""
}
# Original implementation results
# *** testgaussfit status = 1
#   CHI-SQUARE = 10.350032    (6 DOF)
#         NPAR = 4
#        NFREE = 4
#      NPEGGED = 0
#      NITER = 28
#       NFEV = 139

#   P[0] = 0.480443 +/- 0.232235     (ACTUAL 0.000000)
#   P[1] = 4.550752 +/- 0.395434     (ACTUAL 4.700000)
#   P[2] = -0.062562 +/- 0.074715     (ACTUAL 0.000000)
#   P[3] = 0.397472 +/- 0.089996     (ACTUAL 0.500000)

test MpfitClassTest-5 {test procedure of optimization of gaussian function with fixed parameters} -setup {
    proc gaussfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        set sig2 [= {[@ $xall 3]*[@ $xall 3]}]
        foreach xVal $x yVal $y eyVal $ey {
            set xc [= {$xVal-[@ $xall 2]}]
            lappend fvec [= {($yVal-[@ $xall 1]*exp(-0.5*$xc*$xc/$sig2)-[@ $xall 0])/$eyVal}]
        }
        return [dcreate fvec $fvec]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297e-01 1.3416969 1.3757038E+00 -1.3703436 4.2581975e-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list -4.4494256e-02 8.7324673e-01 7.4443483e-01 4.7631559 1.7187297e-01 1.1639182e-01 1.5646480 5.2322268\
                   4.2543168 6.2792623e-01]
    set ey [list 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.0 -fixed]
    set par1 [ParameterMpfit new b 1.0]
    set par2 [ParameterMpfit new c 0.0 -fixed]
    set par3 [ParameterMpfit new d 1.0]
    set optimizer [Mpfit new -funct gaussfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0 $par1 $par2 $par3
} -body {
    $optimizer run
} -result "bestnorm 15.516134278237033 orignorm 180.53273999578116 status {Convergence in chi-square value} niter 12\
nfev 35 npar 4 nfree 2 npegged 0 nfunc 10 resid {-0.10490614314817268 1.7414636965967925 0.1566982403603503\
1.0335441955049696 0.14110837738503337 0.06700325212387523 2.958128822002028 0.3857469679319703 -1.129030079097749\
-1.0868433419354886} xerror {0.0 0.3293066523860077 0.0 0.05380356586978131} x {0.0 5.059242994532408 0.0\
-0.4797468683614697} debug {} covar {0.0 0.0 0.0 0.0 0.0 0.10844287130567891 0.0 0.006592013394423076 0.0 0.0 0.0 0.0\
0.0 0.006592013394423076 0.0 0.002894823700303896}" -cleanup {
    $par0 destroy
    $par1 destroy
    $par2 destroy
    $par3 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 par2 par3 optimizer
    rename gaussfunc ""
}
# Original implementation results
# *** testgaussfix status = 1
#   CHI-SQUARE = 15.516134    (8 DOF)
#         NPAR = 4
#        NFREE = 2
#      NPEGGED = 0
#      NITER = 12
#       NFEV = 35

#   P[0] = 0.000000 +/- 0.000000     (ACTUAL 0.000000)
#   P[1] = 5.059244 +/- 0.329307     (ACTUAL 4.700000)
#   P[2] = 0.000000 +/- 0.000000     (ACTUAL 0.000000)
#   P[3] = 0.479746 +/- 0.053804     (ACTUAL 0.500000)

test MpfitClassTest-6 {test procedure of optimization of gaussian function with fixed parameters and limits} -setup {
    proc gaussfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        set sig2 [= {[@ $xall 3]*[@ $xall 3]}]
        foreach xVal $x yVal $y eyVal $ey {
            set xc [= {$xVal-[@ $xall 2]}]
            lappend fvec [= {($yVal-[@ $xall 1]*exp(-0.5*$xc*$xc/$sig2)-[@ $xall 0])/$eyVal}]
        }
        return [dcreate fvec $fvec]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297e-01 1.3416969 1.3757038E+00 -1.3703436 4.2581975e-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list -4.4494256e-02 8.7324673e-01 7.4443483e-01 4.7631559 1.7187297e-01 1.1639182e-01 1.5646480 5.2322268\
                   4.2543168 6.2792623e-01]
    set ey [list 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.0 -fixed]
    set par1 [ParameterMpfit new b 1.0]
    set par2 [ParameterMpfit new c 0.0 -fixed]
    set par3 [ParameterMpfit new d 0.1 -lowlim -0.3 -uplim 0.2]
    set optimizer [Mpfit new -funct gaussfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0 $par1 $par2 $par3
} -body {
    $optimizer run
} -result "bestnorm 45.18056903753689 orignorm 243.2271623129484 status {Convergence in chi-square value} niter 5 nfev\
14 npar 4 nfree 2 npegged 1 nfunc 10 resid {-0.08898851200000091 1.74649346 1.4887656083928653 5.098184884389671\
0.34374593795140235 0.23278363935465754 3.1292959992242944 -1.3947767482978985 -0.6586409463165577 1.2531741727173265}\
xerror {0.0 0.3880773919104067 0.0 0.0} x {0.0 6.065546367067512 0.0 0.2} debug {} covar {0.0 0.0 0.0 0.0 0.0\
0.15060406211198338 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0}" -cleanup {
    $par0 destroy
    $par1 destroy
    $par2 destroy
    $par3 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 par2 par3 optimizer
    rename gaussfunc ""
}
# Original implementation results
# *** testgaussfix status = 1
#   CHI-SQUARE = 45.180569    (8 DOF)
#         NPAR = 4
#        NFREE = 2
#      NPEGGED = 1
#      NITER = 5
#       NFEV = 14

#   P[0] = 0.000000 +/- 0.000000     (ACTUAL 0.000000)
#   P[1] = 6.065546 +/- 0.388077     (ACTUAL 4.700000)
#   P[2] = 0.000000 +/- 0.000000     (ACTUAL 0.000000)
#   P[3] = 0.200000 +/- 0.000000     (ACTUAL 0.500000)

test MpfitClassTest-7 {test procedure of optimization of quadratic function with debug output} -setup {
    proc quadfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            lappend fvec [= {($yVal-[@ $xall 0]-[@ $xall 1]*$xVal-[@ $xall 2]*$xVal*$xVal)/$eyVal}]
        }
        if {[@ $args 0]!=""} {
            set derivs [@ $args 0]
            foreach deriv $derivs {
                if {$deriv==0} {
                    foreach xVal $x yVal $y eyVal $ey {
                        lappend dvec [= {-1/$eyVal}]
                    }   
                }
                if {$deriv==1} {
                    foreach xVal $x yVal $y eyVal $ey {
                        lappend dvec [= {(-$xVal)/$eyVal}]
                    }
                }
                if {$deriv==2} {
                    foreach xVal $x yVal $y eyVal $ey {
                        lappend dvec [= {(-$xVal*$xVal)/$eyVal}]
                    }
                }
            }
            return [dcreate fvec $fvec dvec $dvec]
        } else {
            return [dcreate fvec $fvec]
        }
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297e-01 1.3416969 1.3757038E+00 -1.3703436 4.2581975e-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 2.3095947e+01 2.6449392e+01 1.0204468E+01 5.40507 1.5787588e+01 1.6520903e+01 1.5971818e+01 4.7668524\
                   4.9337711 8.7348375]
    set ey [list 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 1.0 -debugder -debugreltol 0 -debugabstol 0]
    set par1 [ParameterMpfit new b 0.0]
    set par2 [ParameterMpfit new c 1.0 -debugder -debugreltol 0 -debugabstol 0]
    set optimizer [Mpfit new -funct quadfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0 $par1 $par2
} -body {
    $optimizer run
} -result "bestnorm 5.679322734138698 orignorm 38494.35736468919 status {Convergence in chi-square value} niter 3 nfev\
12 npar 3 nfree 3 npegged 0 nfunc 10 resid {0.941606617369608 0.24222308783135915 -0.9548934195514303 1.1106075051620417\
-0.4734894834130454 0.3347777166168786 -1.09773926076004 0.24591600533606253 0.5059657212366118 -0.8549744598256326}\
xerror {0.09751164416357268 0.05480194186458845 0.054432747180069095} x {4.70382909028792 0.06258627755649324\
6.1630872259520295} debug {     INPUT       FUNC    DERIV_U    DERIV_N   DIFF_ABS   DIFF_REL
FJAC PARM 0
         0      95.62         -5         -5  5.545e-08 -1.109e-08
         1      109.7         -5         -5  5.545e-08 -1.109e-08
         2      41.36         -5         -5  5.545e-08 -1.109e-08
         3      21.62         -5         -5  5.545e-08 -1.109e-08
         4      64.94         -5         -5  5.545e-08 -1.109e-08
         5      68.14         -5         -5  5.545e-08 -1.109e-08
         6      65.47         -5         -5  5.545e-08 -1.109e-08
         7      18.83         -5         -5  5.545e-08 -1.109e-08
         8      19.56         -5         -5  5.545e-08 -1.109e-08
         9      35.31         -5         -5  5.545e-08 -1.109e-08
FJAC PARM 2
         0      95.62     -14.86     -14.86   4.55e-07 -3.063e-08
         1      109.7     -17.51     -17.51 -5.648e-09  3.226e-10
         2      41.36     -4.667     -4.667   1.72e-07 -3.686e-08
         3      21.62    -0.4031    -0.4031 -1.515e-07  3.757e-07
         4      64.94     -9.001     -9.001  6.452e-07 -7.168e-08
         5      68.14     -9.463     -9.463  1.726e-07 -1.824e-08
         6      65.47     -9.389     -9.389  3.379e-08 -3.599e-09
         7      18.83  -0.009066  -0.009066 -1.799e-08  1.984e-06
         8      19.56    -0.1121    -0.1121 -3.018e-08  2.693e-07
         9      35.31     -3.367     -3.367  2.986e-07 -8.868e-08
FJAC DEBUG END
     INPUT       FUNC    DERIV_U    DERIV_N   DIFF_ABS   DIFF_REL
FJAC PARM 0
         0     0.9416         -5         -5 -1.357e-07  2.714e-08
         1     0.2422         -5         -5 -1.357e-07  2.714e-08
         2    -0.9549         -5         -5 -8.984e-09  1.797e-09
         3      1.111         -5         -5 -8.984e-09  1.797e-09
         4    -0.4735         -5         -5 -8.984e-09  1.797e-09
         5     0.3348         -5         -5 -8.984e-09  1.797e-09
         6     -1.098         -5         -5 -8.984e-09  1.797e-09
         7     0.2459         -5         -5 -8.984e-09  1.797e-09
         8      0.506         -5         -5 -8.984e-09  1.797e-09
         9     -0.855         -5         -5 -8.984e-09  1.797e-09
FJAC PARM 2
         0     0.9416     -14.86     -14.86 -1.558e-07  1.049e-08
         1     0.2422     -17.51     -17.51 -1.396e-07  7.973e-09
         2    -0.9549     -4.667     -4.667  8.942e-09 -1.916e-09
         3      1.111    -0.4031    -0.4031 -2.794e-09  6.932e-09
         4    -0.4735     -9.001     -9.001 -4.034e-08  4.481e-09
         5     0.3348     -9.463     -9.463  -9.87e-08  1.043e-08
         6     -1.098     -9.389     -9.389  9.314e-08  -9.92e-09
         7     0.2459  -0.009066  -0.009066 -5.212e-11  5.749e-09
         8      0.506    -0.1121    -0.1121 -1.994e-11   1.78e-10
         9     -0.855     -3.367     -3.367 -3.157e-08  9.375e-09
FJAC DEBUG END} covar {0.009508520747483217 0.00036348288550371114 -0.004030099872181206 0.00036348288550371114\
0.003003252832129732 -0.0004734468204478029 -0.004030099872181206 -0.0004734468204478029 0.00296292396556932}" -cleanup {
    $par0 destroy
    $par1 destroy
    $par2 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 par2 optimizer
    rename quadfunc ""
}

test MpfitClassTest-8 {test procedure of optimization of quadratic function with analytical derivative for 1 and 3 parameters} -setup {
    proc quadfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            lappend fvec [= {($yVal-[@ $xall 0]-[@ $xall 1]*$xVal-[@ $xall 2]*$xVal*$xVal)/$eyVal}]
        }
        if {[@ $args 0]!=""} {
            set derivs [@ $args 0]
            foreach deriv $derivs {
                if {$deriv==0} {
                    foreach xVal $x yVal $y eyVal $ey {
                        lappend dvec [= {-1/$eyVal}]
                    }   
                }
                if {$deriv==1} {
                    foreach xVal $x yVal $y eyVal $ey {
                        lappend dvec [= {(-$xVal)/$eyVal}]
                    }
                }
                if {$deriv==2} {
                    foreach xVal $x yVal $y eyVal $ey {
                        lappend dvec [= {(-$xVal*$xVal)/$eyVal}]
                    }
                }
            }
            return [dcreate fvec $fvec dvec $dvec]
        } else {
            return [dcreate fvec $fvec]
        }
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297e-01 1.3416969 1.3757038E+00 -1.3703436 4.2581975e-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 2.3095947e+01 2.6449392e+01 1.0204468E+01 5.40507 1.5787588e+01 1.6520903e+01 1.5971818e+01 4.7668524\
                   4.9337711 8.7348375]
    set ey [list 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 1.0 -side an]
    set par1 [ParameterMpfit new b 0.0]
    set par2 [ParameterMpfit new c 1.0 -side an]
    set optimizer [Mpfit new -funct quadfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0 $par1 $par2
} -body {
    $optimizer run
} -result "bestnorm 5.679322734138842 orignorm 38494.35736468919 status {Convergence in chi-square value} niter 2 nfev 8\
npar 3 nfree 3 npegged 0 nfunc 10 resid {0.9416062473404807 0.24222332420377413 -0.9548935875618314 1.1106074851306946\
-0.47348928031818893 0.3347779224306535 -1.0977395316328042 0.24591604476769574 0.5059657265429982 -0.8549743083749783}\
xerror {0.09751164314171333 0.0548019271828151 0.05443274212050892} x {4.70382908386901 0.06258624280146556\
6.16308723285737} debug {} covar {0.009508520548196848 0.00036348188359301454 -0.004030099547892829\
0.00036348188359301454 0.003003251222950568 -0.0004734449191253863 -0.004030099547892829 -0.0004734449191253863\
0.0029629234147578263}" -cleanup {
    $par0 destroy
    $par1 destroy
    $par2 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 par2 optimizer
    rename quadfunc ""
}

test MpfitClassTest-9 {test procedure of optimization errors handling} -setup {
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
} -body {
    catch {set optimizer [Mpfit new -funct "" -m 10 -pdata $pdata]} errorStr
    return $errorStr
} -result "Function must have a name, empty string was provided" -cleanup {
    unset x y ey pdata errorStr
}

test MpfitClassTest-10 {test procedure of optimization errors handling} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
} -body {
    catch {set optimizer [Mpfit new -funct linfunc -m -1 -pdata $pdata]} errorStr
    return $errorStr
} -result "Number of values m must be more than 0" -cleanup {
    unset x y ey pdata errorStr
}

test MpfitClassTest-11 {test procedure of optimization errors handling} -setup {
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 1.0 -fixed]
    set par1 [ParameterMpfit new b 1.0 -fixed]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0 $par1
} -body {
    catch {$optimizer run} errorStr
    return $errorStr
} -result "All parameters are fixed, optimization is not possible" -cleanup {
    unset x y ey pdata par0 par1 optimizer errorStr
}

test MpfitClassTest-12 {test procedure of optimization errors handling} -setup {
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5]
    set par1 [ParameterMpfit new b 1.0]
} -body {
    catch {set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata -ftol 0]} errorStr
    return $errorStr
} -result "ftol value '0' must be more than zero" -cleanup {
    unset x y ey pdata par0 par1 errorStr
}

test MpfitClassTest-13 {test procedure of optimization errors handling} -setup {
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5]
    set par1 [ParameterMpfit new b 1.0]
} -body {
    catch {set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata -xtol 0]} errorStr
    return $errorStr
} -result "xtol value '0' must be more than zero" -cleanup {
    unset x y ey pdata par0 par1 errorStr
}

test MpfitClassTest-14 {test procedure of optimization errors handling} -setup {
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5]
    set par1 [ParameterMpfit new b 1.0]
} -body {
    catch {set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata -gtol 0]} errorStr
    return $errorStr
} -result "gtol value '0' must be more than zero" -cleanup {
    unset x y ey pdata par0 par1 errorStr
}

test MpfitClassTest-15 {test procedure of optimization errors handling} -setup {
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5]
    set par1 [ParameterMpfit new b 1.0]
} -body {
    catch {set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata -maxiter -1]} errorStr
    return $errorStr
} -result "Maximum iterations number '-1' must be more than or equal to 0" -cleanup {
    unset x y ey pdata par0 par1 errorStr
}

test MpfitClassTest-16 {test procedure of optimization errors handling} -setup {
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5]
    set par1 [ParameterMpfit new b 1.0]
    set optimizer [Mpfit new -funct linfunc -m 1 -pdata $pdata]
    $optimizer addPars $par0 $par1
} -body {
    catch {$optimizer run} errorStr
    return $errorStr
} -result "Degree of freedom check failed because of 'm=1>=n=2'" -cleanup {
    unset x y ey pdata par0 par1 optimizer errorStr
}

test MpfitClassTest-17 {test procedure of optimization errors handling} -setup {
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5]
    set par1 [ParameterMpfit new b 1.0]
} -body {
    catch {set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata -stepfactor 0]} errorStr
    return $errorStr
} -result "stepfactor value '0' must be more than zero" -cleanup {
    unset x y ey pdata par0 par1 errorStr
}

test MpfitClassTest-18 {test procedure of optimization of linear function with -nofinitecheck} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }

    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5]
    set par1 [ParameterMpfit new b 1.0]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata -nofinitecheck]
    $optimizer addPars $par0 $par1
} -body {
    $optimizer run
} -result "bestnorm 2.756284982812975 orignorm 17475.81280510226 status {Convergence in chi-square value} niter 3 nfev 8\
npar 2 nfree 2 npegged 0 nfunc 10 resid {0.4665000063092644 0.8131242947498356 -0.5829829541606824 0.28527684418915605\
0.15536884646007362 -0.30494490319056106 0.06378629427930944 -0.3628649219779361 0.46178573329514544\
-0.9950492584261663} xerror {0.022210176319442228 0.018937556548612428} x {3.2099657169532576 1.7709542026925287} debug\
{} covar {0.0004932919321407123 -3.4359715519660666e-5 -3.4359715519660666e-5 0.00035863104803189345}" -cleanup {
    $par0 destroy
    $par1 destroy
    $optimizer destroy
    unset x y ey pdata
    rename linfunc ""
}

test MpfitClassTest-19 {test procedure of optimization of quadratic function with two-side derivatives} -setup {
    proc quadfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            lappend fvec [= {($yVal-[@ $xall 0]-[@ $xall 1]*$xVal-[@ $xall 2]*$xVal*$xVal)/$eyVal}]
        }
        return [dcreate fvec $fvec]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297e-01 1.3416969 1.3757038E+00 -1.3703436 4.2581975e-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 2.3095947e+01 2.6449392e+01 1.0204468E+01 5.40507 1.5787588e+01 1.6520903e+01 1.5971818e+01 4.7668524\
                   4.9337711 8.7348375]
    set ey [list 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 1.0 -side both]
    set par1 [ParameterMpfit new b 0.0 -fixed]
    set par2 [ParameterMpfit new c 1.0]
    set optimizer [Mpfit new -funct quadfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0 $par1 $par2
} -body {
    $optimizer run
} -result "bestnorm 6.983587997089938 orignorm 38494.35736468919 status {Convergence in chi-square value} niter 3 nfev\
10 npar 3 nfree 2 npegged 0 nfunc 10 resid {0.29350257525960544 0.6929276976713439 -1.2653783877858515\
1.0556494985021563 -0.10456124517579823 0.7097890039013688 -1.5813262634288616 0.29702576725256263 0.495887840973705\
-0.5935164871703247} xerror {0.09728580872021338 0.0 0.05374279138759468} x {4.696254295255681 0.0 6.172953601713241}\
debug {} covar {0.009464528578345946 0.0 -0.003972798785578442 0.0 0.0 0.0 -0.003972798785578442 0.0\
0.0028882876261305205}" -cleanup {
    $par0 destroy
    $par1 destroy
    $par2 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 par2 optimizer
    rename quadfunc ""
}

test MpfitClassTest-20 {test procedure of optimization of quadratic function with debug output and two-side derivatives} -setup {
    proc quadfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            lappend fvec [= {($yVal-[@ $xall 0]-[@ $xall 1]*$xVal-[@ $xall 2]*$xVal*$xVal)/$eyVal}]
        }
        if {[@ $args 0]!=""} {
            set derivs [@ $args 0]
            foreach deriv $derivs {
                if {$deriv==0} {
                    foreach xVal $x yVal $y eyVal $ey {
                        lappend dvec [= {-1/$eyVal}]
                    }   
                }
                if {$deriv==1} {
                    foreach xVal $x yVal $y eyVal $ey {
                        lappend dvec [= {(-$xVal)/$eyVal}]
                    }
                }
                if {$deriv==2} {
                    foreach xVal $x yVal $y eyVal $ey {
                        lappend dvec [= {(-$xVal*$xVal)/$eyVal}]
                    }
                }
            }
            return [dcreate fvec $fvec dvec $dvec]
        } else {
            return [dcreate fvec $fvec]
        }
        
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297e-01 1.3416969 1.3757038E+00 -1.3703436 4.2581975e-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 2.3095947e+01 2.6449392e+01 1.0204468E+01 5.40507 1.5787588e+01 1.6520903e+01 1.5971818e+01 4.7668524\
                   4.9337711 8.7348375]
    set ey [list 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 1.0 -debugder -debugreltol 0 -debugabstol 0 -side both]
    set par1 [ParameterMpfit new b 0.0 -fixed]
    set par2 [ParameterMpfit new c 1.0 -debugder -debugreltol 0 -debugabstol 0]
    set optimizer [Mpfit new -funct quadfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0 $par1 $par2
} -body {
    $optimizer run
} -result "bestnorm 6.983587997089938 orignorm 38494.35736468919 status {Convergence in chi-square value} niter 3 nfev\
12 npar 3 nfree 2 npegged 0 nfunc 10 resid {0.29350257525960544 0.6929276976713439 -1.2653783877858515\
1.0556494985021563 -0.10456124517579823 0.7097890039013688 -1.5813262634288616 0.29702576725256263 0.495887840973705\
-0.5935164871703247} xerror {0.09728580872021338 0.0 0.05374279138759468} x {4.696254295255681 0.0 6.172953601713241}\
debug {     INPUT       FUNC    DERIV_U    DERIV_N   DIFF_ABS   DIFF_REL
FJAC PARM 0
         0      95.62         -5         -5  5.545e-08 -1.109e-08
         1      109.7         -5         -5  5.545e-08 -1.109e-08
         2      41.36         -5         -5  5.545e-08 -1.109e-08
         3      21.62         -5         -5  5.545e-08 -1.109e-08
         4      64.94         -5         -5  5.545e-08 -1.109e-08
         5      68.14         -5         -5  5.545e-08 -1.109e-08
         6      65.47         -5         -5  5.545e-08 -1.109e-08
         7      18.83         -5         -5  5.545e-08 -1.109e-08
         8      19.56         -5         -5  5.545e-08 -1.109e-08
         9      35.31         -5         -5  5.545e-08 -1.109e-08
FJAC PARM 2
         0      95.62     -14.86     -14.86   4.55e-07 -3.063e-08
         1      109.7     -17.51     -17.51 -5.648e-09  3.226e-10
         2      41.36     -4.667     -4.667   1.72e-07 -3.686e-08
         3      21.62    -0.4031    -0.4031 -1.515e-07  3.757e-07
         4      64.94     -9.001     -9.001  6.452e-07 -7.168e-08
         5      68.14     -9.463     -9.463  1.726e-07 -1.824e-08
         6      65.47     -9.389     -9.389  3.379e-08 -3.599e-09
         7      18.83  -0.009066  -0.009066 -1.799e-08  1.984e-06
         8      19.56    -0.1121    -0.1121 -3.018e-08  2.693e-07
         9      35.31     -3.367     -3.367  2.986e-07 -8.868e-08
FJAC DEBUG END
     INPUT       FUNC    DERIV_U    DERIV_N   DIFF_ABS   DIFF_REL
FJAC PARM 0
         0     0.2935         -5         -5 -1.835e-08  3.669e-09
         1     0.6929         -5         -5 -1.835e-08  3.669e-09
         2     -1.265         -5         -5 -1.835e-08  3.669e-09
         3      1.056         -5         -5 -1.835e-08  3.669e-09
         4    -0.1046         -5         -5 -1.835e-08  3.669e-09
         5     0.7098         -5         -5 -1.835e-08  3.669e-09
         6     -1.581         -5         -5 -1.835e-08  3.669e-09
         7      0.297         -5         -5 -1.835e-08  3.669e-09
         8     0.4959         -5         -5 -1.835e-08  3.669e-09
         9    -0.5935         -5         -5 -1.835e-08  3.669e-09
FJAC PARM 2
         0     0.2935     -14.86     -14.86 -7.455e-09  5.018e-10
         1     0.6929     -17.51     -17.51 -7.821e-08  4.467e-09
         2     -1.265     -4.667     -4.667 -2.899e-09  6.211e-10
         3      1.056    -0.4031    -0.4031 -2.354e-09  5.839e-09
         4    -0.1046     -9.001     -9.001 -1.008e-07   1.12e-08
         5     0.7098     -9.463     -9.463 -9.661e-08  1.021e-08
         6     -1.581     -9.389     -9.389 -7.411e-08  7.893e-09
         7      0.297  -0.009066  -0.009066 -3.369e-10  3.715e-08
         8     0.4959    -0.1121    -0.1121  -4.37e-10    3.9e-09
         9    -0.5935     -3.367     -3.367 -4.483e-08  1.331e-08
FJAC DEBUG END} covar {0.009464528578345946 0.0 -0.003972798785578442 0.0 0.0 0.0 -0.003972798785578442 0.0\
0.0028882876261305205}" -cleanup {
    $par0 destroy
    $par1 destroy
    $par2 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 par2 optimizer
    rename quadfunc ""
}

test MpfitClassTest-21 {test procedure of optimization errors handling} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5 -lowlim 0 -uplim 2]
    set par1 [ParameterMpfit new b 1.0 -fixed]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata -maxiter 2]
    $optimizer addPars $par0 $par1
} -body {
    $optimizer run
} -result "bestnorm 5023.796802041035 orignorm 17475.81280510226 status {Maximum number of iterations reached} niter 2\
nfev 4 npar 2 nfree 1 npegged 1 nfunc 10 resid {-1.2326130000000008 38.70736 6.0621864285714295 14.443258142857143\
32.217548571428566 32.13177428571428 2.2565514285714277 17.391341785714285 16.098253000000003 25.328522285714286}\
xerror {0.022135943956225177 0.0} x {2 1.0} debug {} covar {0.000490000014833142 0.0 0.0 0.0}" -cleanup {
    $par0 destroy
    $par1 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 optimizer
    rename linfunc ""
}

test MpfitClassTest-22 {test procedure of optimization} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5 -lowlim 0 -uplim 2]
    set par1 [ParameterMpfit new b 1.0 -fixed]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata -ftol 1e-3]
    $optimizer addPars $par0 $par1
} -body {
    $optimizer run
} -result "bestnorm 5023.796802041035 orignorm 17475.81280510226 status {Convergence in orthogonality} niter 2 nfev 5\
npar 2 nfree 1 npegged 1 nfunc 10 resid {-1.2326130000000008 38.70736 6.0621864285714295 14.443258142857143\
32.217548571428566 32.13177428571428 2.2565514285714277 17.391341785714285 16.098253000000003 25.328522285714286}\
xerror {0.0 0.0} x {2 1.0} debug {} covar {0.0 0.0 0.0 0.0}" -cleanup {
    $par0 destroy
    $par1 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 optimizer
    rename linfunc ""
}

test MpfitClassTest-23 {test procedure of optimization} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5 -lowlim 0 -uplim 2]
    set par1 [ParameterMpfit new b 1.0 -fixed]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata -maxiter 0]
    $optimizer addPars $par0 $par1
} -body {
    $optimizer run
} -result "bestnorm 17475.81280510226 orignorm 17475.81280510226 status {Maximum number of iterations reached} niter 1\
nfev 3 npar 2 nfree 1 npegged 0 nfunc 10 resid {20.195958428571426 60.135931428571425 27.490757857142857\
35.87182957142857 53.64611999999999 53.5603457142857 23.685122857142854 38.81991321428571 37.52682442857142\
46.75709371428571} xerror {0.022135943956225177 0.0} x {0.5 1.0} debug {} covar {0.000490000014833142 0.0 0.0 0.0}" -cleanup {
    $par0 destroy
    $par1 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 optimizer
    rename linfunc ""
}

test MpfitClassTest-24 {test procedure of optimization} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5 -lowlim 0 -uplim 2]
    set par1 [ParameterMpfit new b 1.0 -fixed]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata -maxfev 3]
    $optimizer addPars $par0 $par1
} -body {
    $optimizer run
} -result "bestnorm 5023.796802041035 orignorm 17475.81280510226 status {Maximum number of function evaluations reached}\
niter 2 nfev 4 npar 2 nfree 1 npegged 1 nfunc 10 resid {-1.2326130000000008 38.70736 6.0621864285714295\
14.443258142857143 32.217548571428566 32.13177428571428 2.2565514285714277 17.391341785714285 16.098253000000003\
25.328522285714286} xerror {0.022135943956225177 0.0} x {2 1.0} debug {} covar {0.000490000014833142 0.0 0.0 0.0}" -cleanup {
    $par0 destroy
    $par1 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 optimizer
    rename linfunc ""
}

test MpfitClassTest-25 {test MpfitClass optimization class of quadratic function with tight limits} -setup {
    proc quadfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            lappend fvec [= {($yVal-[@ $xall 0]-[@ $xall 1]*$xVal-[@ $xall 2]*$xVal*$xVal)/$eyVal}]
        }
        return [dcreate fvec $fvec]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297e-01 1.3416969 1.3757038E+00 -1.3703436 4.2581975e-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 2.3095947e+01 2.6449392e+01 1.0204468E+01 5.40507 1.5787588e+01 1.6520903e+01 1.5971818e+01 4.7668524\
                   4.9337711 8.7348375]
    set ey [list 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 1.0 -lowlim 0.999999 -uplim 1.0 -relstep 1]
    set par1 [ParameterMpfit new b 0.0 -fixed]
    set par2 [ParameterMpfit new c 1.0 -lowlim 0.9 -uplim 1.1 -relstep 1]
    set optimizer [Mpfit new -funct quadfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0 $par1 $par2
} -body {
    $optimizer run
} -result "bestnorm 37400.78872314016 orignorm 38494.35736468919 status {Convergence in orthogonality} niter 2 nfev 7\
npar 3 nfree 2 npegged 2 nfunc 10 resid {94.13821300713887 107.98874997949031 40.88912604001433 21.581920143831685\
64.03711185691714 67.19542980066058 64.5309612986647 18.824289264728048 19.54559751847046 34.97011369072413} xerror\
{0.0 0.0 0.0} x {1.0 0.0 1.1} debug {} covar {0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0}" -cleanup {
    $par0 destroy
    $par1 destroy
    $par2 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 par2 optimizer
    rename quadfunc ""
}

test MpfitClassTest-26 {test procedure of optimization errors handling} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [Parameter new a 0.5]
    set par1 [ParameterMpfit new b 1.0]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata]    
} -body {
    catch {$optimizer addPars $par0 $par1} errorStr
    return $errorStr
} -result "Only ::tclopt::ParameterMpfit could be added to optimizer, '::tclopt::Parameter' was provided" -cleanup {
    $par0 destroy
    $par1 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 optimizer errorStr
}

test MpfitClassTest-27 {test procedure of optimization errors handling} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5]
    set par1 [ParameterMpfit new a 1.0]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata]    
} -body {
    catch {$optimizer addPars $par0 $par1} errorStr
    return $errorStr
} -result "Optimizer already contains parameter with name 'a'" -cleanup {
    $par0 destroy
    $par1 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 optimizer errorStr
}

test MpfitClassTest-28 {test procedure of optimization errors handling} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5]
    set par1 [ParameterMpfit new a 1.0]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0
} -body {
    catch {$optimizer addPars $par1} errorStr
    return $errorStr
} -result "Optimizer already contains parameter with name 'a'" -cleanup {
    $par0 destroy
    $par1 destroy
    $optimizer destroy
    unset x y ey pdata par0 par1 optimizer errorStr
}

test MpfitClassTest-29 {test procedure of optimization errors handling} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata]
} -body {
    catch {$optimizer getAllPars} errorStr
    return $errorStr
} -result "There are no parameters attached to optimizer" -cleanup {
    $optimizer destroy
    unset x y ey pdata optimizer errorStr
}

test MpfitClassTest-30 {test procedure of optimization errors handling} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata]
} -body {
    catch {$optimizer getAllParsNames} errorStr
    return $errorStr
} -result "There are no parameters attached to optimizer" -cleanup {
    $optimizer destroy
    unset x y ey pdata optimizer errorStr
}

test MpfitClassTest-31 {test procedure of optimization errors handling} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata]
} -body {
    catch {$optimizer run} errorStr
    return $errorStr
} -result "At least one parameter must be attached to optimizer before call to run" -cleanup {
    $optimizer destroy
    unset x y ey pdata optimizer errorStr
}

test MpfitClassTest-32 {test procedure of optimization} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5 -step 0.01]
    set par1 [ParameterMpfit new b 1.0]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0 $par1
} -body {
    $optimizer run
} -result "bestnorm 2.7562849828129585 orignorm 17475.81280510226 status {Convergence in chi-square value} niter 3 nfev\
8 npar 2 nfree 2 npegged 0 nfunc 10 resid {0.4665000070537229 0.813124297673148 -0.5829829529570293 0.2852768458062498\
0.1553688490624364 -0.30494490056757984 0.0637862952379458 -0.36286492016294347 0.4617857349935964 -0.9950492561395891}\
xerror {0.022210176383883933 0.01893755644455157} x {3.2099657168280147 1.7709542026501024} debug {} covar\
{0.0004932919350032356 -3.435971605355859e-5 -3.435971605355859e-5 0.0003586310440905767}" -cleanup {
    $par0 destroy
    $par1 destroy
    $optimizer destroy
    unset x y ey pdata optimizer par0 par1
}

test MpfitClassTest-33 {test procedure of optimization with multiple call to run} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5 -step 0.01]
    set par1 [ParameterMpfit new b 1.0]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0 $par1
    $optimizer run
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    $optimizer configure -m 8 -pdata $pdata
} -body {
    $optimizer run
} -result "bestnorm 1.4598190909489765 orignorm 13881.324440802935 status {Convergence in chi-square value} niter 3 nfev\
8 npar 2 nfree 2 npegged 0 nfunc 8 resid {0.5166995467696075 0.6245794080422964 -0.5830987061402837 0.23985949394473213\
0.001990746840085933 -0.46058144299504017 0.09051815020369842 -0.4299671966650756} xerror {0.02475850834434324\
0.019378262626340778} x {3.2144649216767336 1.7756029890539806} debug {} covar {0.0006129837354369138\
-1.347779322612925e-5 -1.347779322612925e-5 0.00037551706241543585}" -cleanup {
    $par0 destroy
    $par1 destroy
    $optimizer destroy
    unset x y ey pdata optimizer par0 par1
}

test MpfitClassTest-34 {test procedure of optimization with multiple call to run} -setup {
    proc linfunc {xall pdata args} {
        set x [dget $pdata x]
        set y [dget $pdata y]
        set ey [dget $pdata ey]
        foreach xVal $x yVal $y eyVal $ey {
            set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
            lappend fval [= {($yVal-$f)/$eyVal}]
        }
        return [dcreate fvec $fval]
    }
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02\
                   -1.4970151E-01 8.2065094E-01]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759 2.9771762 4.5936475]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    set par0 [ParameterMpfit new a 0.5 -step 0.01]
    set par1 [ParameterMpfit new b 1.0]
    set optimizer [Mpfit new -funct linfunc -m 10 -pdata $pdata]
    $optimizer addPars $par0 $par1
    $optimizer run
    set x [list -1.7237128 1.8712276 -9.6608055E-01 -2.8394297E-01 1.3416969 1.3757038 -1.3703436 4.2581975E-02]
    set y [list 1.9000429e-01 6.5807428 1.4582725 2.7270851 5.5969253 5.6249280 0.787615 3.2599759]
    set ey [list 0.07 0.07 0.07 0.07 0.07 0.07 0.07 0.07]
    set pdata [dcreate x $x y $y ey $ey]
    $optimizer configure -m 7 -pdata $pdata
} -body {
    catch {$optimizer run} errorStr
    return $errorStr
} -result "Length of list '8' returned from the function is less than m '7' value" -cleanup {
    $par0 destroy
    $par1 destroy
    $optimizer destroy
    unset x y ey pdata optimizer par0 par1
}

### parameter creation test

test ParameterMpfitClassTest-1 {test procedure of ParameterMpfit object creation} -body {
    set param [ParameterMpfit new a 0.5 -fixed -uplim 100 -step 0.01]
    foreach prop [info class properties ParameterMpfit -all] {
        if {![catch {$param configure $prop}]} {
            lappend props $prop [$param configure $prop]
        }
    }
    return [join $props]
} -result "-debugder 0 -fixed 1 -initval 0.5 -name a -side auto -step 0.01 -uplim 100" -cleanup {
    $param destroy
    unset props param prop
}

test ParameterMpfitClassTest-2 {test procedure of ParameterMpfit object creation} -body {
    set param [ParameterMpfit new a 0.5 -fixed -uplim 100 -lowlim -10 -relstep 0.01]
    foreach prop [info class properties ParameterMpfit -all] {
        if {![catch {$param configure $prop}]} {
            lappend props $prop [$param configure $prop]
        }
    }
    return [join $props]
} -result "-debugder 0 -fixed 1 -initval 0.5 -lowlim -10 -name a -relstep 0.01 -side auto -uplim 100" -cleanup {
    $param destroy
    unset props param prop
}

test ParameterMpfitClassTest-3 {test procedure of ParameterMpfit object creation} -body {
    set param [ParameterMpfit new a 0.5 -fixed -uplim 100 -lowlim -10 -relstep 0.01 -side an]
    foreach prop [info class properties ParameterMpfit -all] {
        if {![catch {$param configure $prop}]} {
            lappend props $prop [$param configure $prop]
        }
    }
    return [join $props]
} -result "-debugder 0 -fixed 1 -initval 0.5 -lowlim -10 -name a -relstep 0.01 -side an -uplim 100" -cleanup {
    $param destroy
    unset props param prop
}

test ParameterMpfitClassTest-4 {test procedure of ParameterMpfit object creation} -body {
    set param [ParameterMpfit new a 0.5 -fixed -uplim 100 -lowlim -10 -relstep 0.01 -side an]
    foreach prop [info class properties ParameterMpfit -all] {
        if {![catch {$param configure $prop}]} {
            lappend props $prop [$param configure $prop]
        }
    }
    return [join $props]
} -result "-debugder 0 -fixed 1 -initval 0.5 -lowlim -10 -name a -relstep 0.01 -side an -uplim 100" -cleanup {
    $param destroy
    unset props param prop
}

test ParameterMpfitClassTest-5 {test procedure of ParameterMpfit object creation} -body {
    catch {ParameterMpfit new a -100 -fixed -uplim 100 -lowlim -10 -relstep 0.01 -side an} errorStr
    return $errorStr
} -result "Initial value must be higher than the lower limit" -cleanup {
    unset errorStr
}

test ParameterMpfitClassTest-6 {test procedure of ParameterMpfit object creation} -body {
    catch {ParameterMpfit new a 200 -fixed -uplim 100 -lowlim -10 -relstep 0.01 -side an} errorStr
    return $errorStr
} -result "Initial value must be lower than the upper limit" -cleanup {
    unset errorStr
}

test ParameterMpfitClassTest-7 {test procedure of ParameterMpfit object creation} -body {
    catch {ParameterMpfit new a 50 -fixed -uplim 0 -lowlim 40 -relstep 0.01 -side an} errorStr
    return $errorStr
} -result "Lower limit must be lower than the upper limit" -cleanup {
    unset errorStr
}

### DE tests
proc polyfunc {pars pdata args} {
    set m 60
    set dx $m
    set dx [= {double(2.0/$dx)}]
    set d [llength $pars]
    set x -1
    set result 0.0
    for {set i 0} {$i<=$m} {incr i} {
        set px [@ $pars 0]
        for {set j 1} {$j<$d} {incr j} {
            set px [= {$x*$px+[@ $pars $j]}]
        }
        if {($px < -1) || ($px > 1)} {
            set result [= {$result+(1.0-$px)*(1.0-$px)}]
        }
        set x [= {$x+$dx}]
    }
    set px [@ $pars 0]
    for {set j 1} {$j<$d} {incr j} {
        set px [= {1.2*$px+[@ $pars $j]}]
    }
    set px [= {$px-72.661}]
    if {$px<0} {
        set result [= {$result+$px*$px}]
    }
    set px [@ $pars 0]
    for {set j 1} {$j<$d} {incr j} {
        set px [= {-1.2*$px+[@ $pars $j]}]
    }
    set px [= {$px-72.661}]
    if {$px<0} {
        set result [= {$result+$px*$px}]
    }
    return $result
}
test DEClassTest-1 {test procedure of optimization} -setup {
    set pdata {}
    for {set i 0} {$i<9} {incr i} {
        lappend pars [Parameter new a$i 0.0 -lowlim -100 -uplim 100]
    }
    set optimizer [DE new -funct polyfunc -pdata $pdata -strategy best/1/exp -genmax 3000 -refresh 100 -d 9 -np 60\
                           -f 0.9 -cr 1 -seed 3]
    $optimizer addPars {*}$pars
} -body {
    $optimizer run
} -result "objfunc 0.0 x {127.83049444305921 0.04559893842416926 -255.2790324882704 -0.21803502712599265\
159.19065156778535 0.21783327230638996 -31.74646730054404 -0.05499126256330574 0.9943771757016615} generation 308\
nfev 18540 strategy best/1/exp std 0.0" -cleanup {
    foreach par $pars {
        $par destroy
    }
    unset pdata optimizer pars
}

test DEClassTest-2 {test procedure of optimization} -setup {
    set pdata {}
    for {set i 0} {$i<9} {incr i} {
        lappend pars [Parameter new a$i 0.0 -lowlim -100 -uplim 100]
    }
    set optimizer [DE new -funct polyfunc -pdata $pdata -strategy rand/1/exp -genmax 3000 -refresh 100 -d 9 -np 60\
                           -f 0.9 -cr 1 -seed 3]
    $optimizer addPars {*}$pars
} -body {
    $optimizer run
} -result "objfunc 0.0 x {128.06204980489977 -0.07434802305891823 -255.94764468022422 0.17634142124771918\
159.7591433375959 -0.1348492903142698 -31.87840715132348 0.032177610402083195 0.9902318025539081} generation 1583\
nfev 95040 strategy rand/1/exp std 0.0" -cleanup {
    foreach par $pars {
        $par destroy
    }
    unset pdata optimizer pars
}

test DEClassTest-3 {test procedure of optimization} -setup {
    set pdata {}
    for {set i 0} {$i<9} {incr i} {
        lappend pars [Parameter new a$i 0.0 -lowlim -100 -uplim 100]
    }
    set optimizer [DE new -funct polyfunc -pdata $pdata -strategy rand-to-best/1/exp -genmax 3000 -refresh 100 -d 9\
                           -np 60 -f 0.9 -cr 1 -seed 3]
    $optimizer addPars {*}$pars
} -body {
    $optimizer run
} -result "objfunc 0.0 x {127.9982869897709 -0.1304490663823123 -255.9071174438064 0.3000376129276846\
159.88524522255403 -0.19359562839673122 -31.967990118840824 0.02208131482833384 0.9892977021405871} generation 318\
nfev 19140 strategy rand-to-best/1/exp std 0.0" -cleanup {
    foreach par $pars {
        $par destroy
    }
    unset pdata optimizer pars
}

test DEClassTest-4 {test procedure of optimization} -setup {
    set pdata {}
    for {set i 0} {$i<9} {incr i} {
        lappend pars [Parameter new a$i 0.0 -lowlim -100 -uplim 100]
    }
    set optimizer [DE new -funct polyfunc -pdata $pdata -strategy best/2/exp -genmax 3000 -refresh 100 -d 9\
                           -np 60 -f 0.9 -cr 1 -seed 3]
    $optimizer addPars {*}$pars
} -body {
    $optimizer run
} -result "objfunc 0.02943823212718208 x {128.6864237526243 -0.3336594998344038 -256.2282074342843 0.5818440036212642\
158.92742493289074 -0.4961791974699563 -31.28708982023748 0.19854240284208374 0.9674351453338869} generation 3000\
nfev 180060 strategy best/2/exp std 0.04012929597565729" -cleanup {
    foreach par $pars {
        $par destroy
    }
    unset pdata optimizer pars
}

test DEClassTest-5 {test procedure of optimization} -setup {
    set pdata {}
    for {set i 0} {$i<9} {incr i} {
        lappend pars [Parameter new a$i 0.0 -lowlim -100 -uplim 100]
    }
    set optimizer [DE new -funct polyfunc -pdata $pdata -strategy rand/2/exp -genmax 3000 -refresh 100 -d 9\
                           -np 60 -f 0.9 -cr 1 -seed 3]
    $optimizer addPars {*}$pars
} -body {
    $optimizer run
} -result "objfunc 8.738299046703865 x {135.8075507091756 11.779535084579713 -267.7030379717249 -28.62652368851337\
162.67705469878035 19.509700157076622 -30.648479640712765 -3.453957828342761 1.3972288989957047} generation 3000\
nfev 180060 strategy rand/2/exp std 8.898342063759285" -cleanup {
    foreach par $pars {
        $par destroy
    }
    unset pdata optimizer pars
}

test DEClassTest-6 {test procedure of optimization} -setup {
    set pdata {}
    for {set i 0} {$i<9} {incr i} {
        lappend pars [Parameter new a$i 0.0 -lowlim -100 -uplim 100]
    }
    set optimizer [DE new -funct polyfunc -pdata $pdata -strategy best/1/bin -genmax 3000 -refresh 100 -d 9\
                           -np 60 -f 0.9 -cr 1 -seed 3]
    $optimizer addPars {*}$pars
} -body {
    $optimizer run
} -result "objfunc 0.0 x {127.83049444305921 0.04559893842416926 -255.2790324882704 -0.21803502712599265\
159.19065156778535 0.21783327230638996 -31.74646730054404 -0.05499126256330574 0.9943771757016615} generation 308\
nfev 18540 strategy best/1/bin std 0.0" -cleanup {
    foreach par $pars {
        $par destroy
    }
    unset pdata optimizer pars
}

test DEClassTest-7 {test procedure of optimization} -setup {
    set pdata {}
    for {set i 0} {$i<9} {incr i} {
        lappend pars [Parameter new a$i 0.0 -lowlim -100 -uplim 100]
    }
    set optimizer [DE new -funct polyfunc -pdata $pdata -strategy rand/1/bin -genmax 3000 -refresh 100 -d 9\
                           -np 60 -f 0.9 -cr 1 -seed 3]
    $optimizer addPars {*}$pars
} -body {
    $optimizer run
} -result "objfunc 0.0 x {128.06204980489977 -0.07434802305891823 -255.94764468022422 0.17634142124771918\
159.7591433375959 -0.1348492903142698 -31.87840715132348 0.032177610402083195 0.9902318025539081} generation 1583\
nfev 95040 strategy rand/1/bin std 0.0" -cleanup {
    foreach par $pars {
        $par destroy
    }
    unset pdata optimizer pars
}

test DEClassTest-8 {test procedure of optimization} -setup {
    set pdata {}
    for {set i 0} {$i<9} {incr i} {
        lappend pars [Parameter new a$i 0.0 -lowlim -100 -uplim 100]
    }
    set optimizer [DE new -funct polyfunc -pdata $pdata -strategy rand-to-best/1/bin -genmax 3000 -refresh 100 -d 9\
                           -np 60 -f 0.9 -cr 1 -seed 3]
    $optimizer addPars {*}$pars
} -body {
    $optimizer run
} -result "objfunc 0.0 x {127.9982869897709 -0.1304490663823123 -255.9071174438064 0.3000376129276846\
159.88524522255403 -0.19359562839673122 -31.967990118840824 0.02208131482833384 0.9892977021405871} generation 318\
nfev 19140 strategy rand-to-best/1/bin std 0.0" -cleanup {
    foreach par $pars {
        $par destroy
    }
    unset pdata optimizer pars
}

test DEClassTest-9 {test procedure of optimization} -setup {
    set pdata {}
    for {set i 0} {$i<9} {incr i} {
        lappend pars [Parameter new a$i 0.0 -lowlim -100 -uplim 100]
    }
    set optimizer [DE new -funct polyfunc -pdata $pdata -strategy best/2/bin -genmax 3000 -refresh 100 -d 9\
                           -np 60 -f 0.9 -cr 1 -seed 3]
    $optimizer addPars {*}$pars
} -body {
    $optimizer run
} -result "objfunc 0.0 x {127.88235364695582 0.16208921261717343 -255.446486626646 -0.3738289290994068\
159.36217226057678 0.2688712517466579 -31.78620382408297 -0.06055625560994782 0.984087755141383} generation 2599\
nfev 156000 strategy best/2/bin std 0.0" -cleanup {
    foreach par $pars {
        $par destroy
    }
    unset pdata optimizer pars
}

test DEClassTest-10 {test procedure of optimization} -setup {
    set pdata {}
    for {set i 0} {$i<9} {incr i} {
        lappend pars [Parameter new a$i 0.0 -lowlim -100 -uplim 100]
    }
    set optimizer [DE new -funct polyfunc -pdata $pdata -strategy rand/2/bin -genmax 3000 -refresh 100 -d 9\
                           -np 60 -f 0.9 -cr 1 -seed 3]
    $optimizer addPars {*}$pars
} -body {
    $optimizer run
} -result "objfunc 0.15896169424706325 x {123.66049163149034 0.8782542577106658 -242.59391792950214\
-1.3556462310755064 146.79998512078453 0.2874021333492942 -27.29018975631272 0.11037729682194941 0.6545327638463837}\
generation 3000 nfev 180060 strategy rand/2/bin std 0.11665857122944345" -cleanup {
    foreach par $pars {
        $par destroy
    }
    unset pdata optimizer pars
}

cleanupTests
exit
