'\"
'\" '\" Copyright (c) George Yashin
'\"
.TH "tclopt" 3tcl 0\&.1 "tclopt" "Tcl wrapper for C optimization procedures"
.SH NAME
tclopt - Commands in namespace tclopt
.SH SYNOPSIS
\fBarray2list\fP \fIarray length\fP
.br
\fBarrayInt2list\fP \fIarray length\fP
.br
\fBarrays2lists\fP \fIvarNames arrays lengths\fP
.br
\fBarraysInt2lists\fP \fIvarNames arrays lengths\fP
.br
\fBcovar\fP \fI-x list -y list -xi list\fP
.br
\fBdeleteArrays\fP \fI?args?\fP
.br
\fBdeleteDoubleps\fP \fI?args?\fP
.br
\fBdeleteIntArrays\fP \fI?args?\fP
.br
\fBdmax1\fP \fIa b\fP
.br
\fBdmin1\fP \fIa b\fP
.br
\fBduplListCheck\fP \fIlist\fP
.br
\fBenorm\fP \fI-x list -y list -xi list\fP
.br
\fBfdjac2\fP \fIfunct m ifree n npar x fvec ldfjac epsfcn pdata nfev step dstep dside qulimited ulimit ddebug ddrtol ddatol\fP
.br
\fBlist2array\fP \fIlist\fP
.br
\fBlist2intArray\fP \fIlist\fP
.br
\fBlists2arrays\fP \fIvarNames lists\fP
.br
\fBlists2intArrays\fP \fIvarNames lists\fP
.br
\fBlmpar\fP \fI-x list -y list -xi list\fP
.br
\fBmin0\fP \fIa b\fP
.br
\fBmpfit\fP \fI-funct value -m value -npar value -xall list -pars list ?-pdata value? ?-ftol value? ?-xtol value? ?-gtol value? ?-stepfactor value? ?-covtol value? ?-maxiter value? ?-maxfev value? ?-epsfcn value? ?-nofinitecheck?\fP
.br
\fBnewArrays\fP \fIvarNames lengths\fP
.br
\fBnewDoubleps\fP \fIvarNames\fP
.br
\fBnewIntArrays\fP \fIvarNames lengths\fP
.br
\fBparCreate\fP \fI?args?\fP
.br
\fBqfrac\fP \fI-x list -y list -xi list\fP
.br
.SH ::TCLOPT
.SH COMMANDS
.PP
.RS -4n
\fBarray2list\fR (::tclopt)
.RE
.PP
Create list from doubleArray object
.RS 4n\fBarray2list\fP \fIarray length\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
array
DoubleArray object\&.
.TP
length
Number of elements in doubleArray\&.
.RE
.PP
\fBReturn value\fR
.PP
list
.PP
.RS -4n
\fBarrayInt2list\fR (::tclopt)
.RE
.PP
Create list from intArray object
.RS 4n\fBarrayInt2list\fP \fIarray length\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
array
IntArray object\&.
.TP
length
Number of elements in intArray\&.
.RE
.PP
\fBReturn value\fR
.PP
list
.PP
.RS -4n
\fBarrays2lists\fR (::tclopt)
.RE
.PP
Create lists from doubleArray objects, and set these lists to variables
.RS 4n\fBarrays2lists\fP \fIvarNames arrays lengths\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
varNames
List of variables names\&.
.TP
arrays
List of doubleArray\&.
.TP
lengths
List of doubleArray lengths\&.
.RE
.PP
\fBReturn value\fR
.PP
variables with lists are set in caller's scope
.PP
.RS -4n
\fBarraysInt2lists\fR (::tclopt)
.RE
.PP
Create lists from intArray objects, and set these lists to variables
.RS 4n\fBarraysInt2lists\fP \fIvarNames arrays lengths\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
varNames
List of variables names\&.
.TP
arrays
List of intArray\&.
.TP
lengths
List of intArray lengths\&.
.RE
.PP
\fBReturn value\fR
.PP
variables with lists are set in caller's scope
.PP
.RS -4n
\fBcovar\fR (::tclopt)
.RE
.PP
dictionary
.RS 4n\fBcovar\fP \fI-x list -y list -xi list\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
n
Is a positive integer input variable set to the order of r\&.
.TP
r
Is an ldr by n array\&.
.TP
ldr
The leading dimension of the array r\&.
.TP
ipvt
Input array of length n which defines the permutation matrix p\&.
.TP
tol
Nonnegative input variable used to define the numerical rank of a in the manner described above\&.
.RE
.PP
\fBReturn value\fR
.PP
dictionary
.PP
.RS -4n
\fBdeleteArrays\fR (::tclopt)
.RE
.PP
Deletes doubleArray objects
.RS 4n\fBdeleteArrays\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
args
List of arrays objects\&.
.RE
.PP
.RS -4n
\fBdeleteDoubleps\fR (::tclopt)
.RE
.PP
Deletes doublep objects
.RS 4n\fBdeleteDoubleps\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
args
List of doublep objects\&.
.RE
.PP
.RS -4n
\fBdeleteIntArrays\fR (::tclopt)
.RE
.PP
Deletes intArray objects
.RS 4n\fBdeleteIntArrays\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
args
List of arrays objects\&.
.RE
.PP
.RS -4n
\fBdmax1\fR (::tclopt)
.RE
.RS 4n\fBdmax1\fP \fIa b\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
a
Not documented\&.
.TP
b
Not documented\&.
.RE
.PP
.RS -4n
\fBdmin1\fR (::tclopt)
.RE
.RS 4n\fBdmin1\fP \fIa b\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
a
Not documented\&.
.TP
b
Not documented\&.
.RE
.PP
.RS -4n
\fBduplListCheck\fR (::tclopt)
.RE
.PP
Checks if list contains duplicates\&.
.RS 4n\fBduplListCheck\fP \fIlist\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
list
List to check\&.
.RE
.PP
\fBReturn value\fR
.PP
false if there are no duplicates and true if there are\&.
.PP
.RS -4n
\fBenorm\fR (::tclopt)
.RE
.PP
Calculate euclidean norm of vector
.RS 4n\fBenorm\fP \fI-x list -y list -xi list\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
x
List with values of vector x\&.
.RE
.PP
\fBReturn value\fR
.PP
norm
.PP
.RS -4n
\fBfdjac2\fR (::tclopt)
.RE
.RS 4n\fBfdjac2\fP \fIfunct m ifree n npar x fvec ldfjac epsfcn pdata nfev step dstep dside qulimited ulimit ddebug ddrtol ddatol\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
funct
Not documented\&.
.TP
m
Not documented\&.
.TP
ifree
Not documented\&.
.TP
n
Not documented\&.
.TP
npar
Not documented\&.
.TP
x
Not documented\&.
.TP
fvec
Not documented\&.
.TP
ldfjac
Not documented\&.
.TP
epsfcn
Not documented\&.
.TP
pdata
Not documented\&.
.TP
nfev
Not documented\&.
.TP
step
Not documented\&.
.TP
dstep
Not documented\&.
.TP
dside
Not documented\&.
.TP
qulimited
Not documented\&.
.TP
ulimit
Not documented\&.
.TP
ddebug
Not documented\&.
.TP
ddrtol
Not documented\&.
.TP
ddatol
Not documented\&.
.RE
.PP
.RS -4n
\fBlist2array\fR (::tclopt)
.RE
.PP
Create and initialize doubleArray object from the list
.RS 4n\fBlist2array\fP \fIlist\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
list
List of values\&.
.RE
.PP
\fBReturn value\fR
.PP
array object
.PP
.RS -4n
\fBlist2intArray\fR (::tclopt)
.RE
.PP
Create and initialize intArray object from the list
.RS 4n\fBlist2intArray\fP \fIlist\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
list
List of values\&.
.RE
.PP
\fBReturn value\fR
.PP
array object
.PP
.RS -4n
\fBlists2arrays\fR (::tclopt)
.RE
.PP
Create and initialize doubleArray objects from lists, and set these objects to variables
.RS 4n\fBlists2arrays\fP \fIvarNames lists\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
varNames
List of variables names\&.
.TP
lists
List of lists\&.
.RE
.PP
\fBReturn value\fR
.PP
variables with doubleArray objects are set in caller's scope
.PP
.RS -4n
\fBlists2intArrays\fR (::tclopt)
.RE
.PP
Create and initialize intArray objects from lists, and set these objects to variables
.RS 4n\fBlists2intArrays\fP \fIvarNames lists\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
varNames
List of variables names\&.
.TP
lists
List of lists\&.
.RE
.PP
\fBReturn value\fR
.PP
variables with intArray objects are set in caller's scope
.PP
.RS -4n
\fBlmpar\fR (::tclopt)
.RE
.PP
dictionary
.RS 4n\fBlmpar\fP \fI-x list -y list -xi list\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
n
Is a positive integer input variable set to the order of r\&.
.TP
r
Is an ldr by n array\&.
.TP
ldr
The leading dimension of the array r\&.
.TP
ipvt
Input array of length n which defines the permutation matrix p\&.
.TP
ifree
Not documented\&.
.TP
diag
Array of length n which must contain the diagonal elements of the matrix d\&.
.TP
qtb
Is an input array of length n which must contain the first n elements of the vector (q transpose)*b\&.
.TP
delta
Is a positive input variable which specifies an upper bound on the euclidean norm of d*x\&.
.TP
par
Is a nonnegative variable\&. on input par contains an initial estimate of the levenberg-marquardt parameter\&.
.RE
.PP
\fBReturn value\fR
.PP
dictionary
.PP
.RS -4n
\fBmin0\fR (::tclopt)
.RE
.RS 4n\fBmin0\fP \fIa b\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
a
Not documented\&.
.TP
b
Not documented\&.
.RE
.PP
.RS -4n
\fBmpfit\fR (::tclopt)
.RE
.PP
Does least squares fitting using modified Levenberg-Marquardt algorithm\&.
.RS 4n\fBmpfit\fP \fI-funct value -m value -npar value -xall list -pars list ?-pdata value? ?-ftol value? ?-xtol value? ?-gtol value? ?-stepfactor value? ?-covtol value? ?-maxiter value? ?-maxfev value? ?-epsfcn value? ?-nofinitecheck?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-covtol
Range tolerance for covariance calculation\&. Value must be of the type float more than zero, default is 1e-14\&.
.TP
-epsfcn
Finite derivative step size\&. Value must be of the type float more than zero, default is 2\&.2204460e-16\&.
.TP
-ftol
Control termination of mpfit\&. Termination occurs when both the actual and predicted relative reductions in the sum of squares are at most ftol\&. Therefore, ftol measures the relative error desired in the sum of squares\&. Value must be of the type float more than zero, default is 1e-10\&.
.TP
-funct
Name of the procedure that should be minimized\&.
.TP
-gtol
Control termination of mpfit\&. Termination occurs when the cosine of the angle between fvec and any column of the jacobian is at most gtol in absolute value\&. Therefore, gtol measures the orthogonality desired between the function vector and the columns of the jacobian\&. Value must be of the type float more than zero, default is 1e-10\&.
.TP
-m
Number of data points\&.
.TP
-maxfev
Control termination of mpfit\&. Termination occurs when the number of calls to funct is at least maxfev by the end of an iteration\&. Value must be the positive integer, default is 0\&. If it equals to 0, number of evaluations is not restricted\&.
.TP
-maxiter
Maximum number of iterations\&. If maxiter equal to 0, then basic error checking is done, and parameter errors/covariances are estimated based on input arameter values, but no fitting iterations are done\&. Value must be the positive integer, default is 200\&.
.TP
-nofinitecheck
Enable check for infinite quantities, default is off\&.
.TP
-npar
Number of fit parameters, also reffered as n in the documentation\&.
.TP
-pars
List of npar dictionaries specifying constraints, length must be equal to npar if provided, optional\&. To specify the dictionary of the right form, use helper procedure ::tclopt::parCreate\&.
.TP
-pdata
List or dictionary that provides private data to funct that is needed to evaluate residuals\&. Usually it contains x and y values lists, but you can provide any data necessary for function residuals evaluation\&. Will be passed upon each function evaluation without modification\&.
.TP
-stepfactor
Used in determining the initial step bound\&. This bound is set to the product of factor and the euclidean norm of diag*x if nonzero, or else to factor itself\&. in most cases factor should lie in the interval (\&.1,100\&.)\&. 100\&. is a generally recommended value\&. Value must be of the type float more than zero, default is 100\&.
.TP
-xall
List of n initial parameter values, length must be equal to npar\&.
.TP
-xtol
Control termination of mpfit\&. Termination occurs when the relative error between two consecutive iterates is at most xtol\&. Therefore, xtol measures the relative error desired in the approximate solution\&. Value must be of the type float more than zero, default is 1e-10\&.
.RE
.PP
\fBDescription\fR
.RS 4n
.TP
parameters, nfree
Number of free parameters, npegged - number of pegged parameters, nfunc - number of residuals (= num\&. of data points), resid - list of final residuals, xerror - final parameter uncertainties (1-sigma),
.TP
x
Final parameters values list, debug - string with derivatives debugging output, covar - final parameters covariance matrix\&.
.RE
.PP
\fBReturn value\fR
.PP
dictionary following keys: bestnorm - final chi^2, orignorm - starting value of chi^2, status - fitting
status code, niter - number of iterations, nfev - number of function evaluations, npar - total number of
.PP
.RS -4n
\fBnewArrays\fR (::tclopt)
.RE
.PP
Creates doubleArray objects, and set these objects to variables
.RS 4n\fBnewArrays\fP \fIvarNames lengths\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
varNames
List of variables names\&.
.TP
lengths
List of doubleArray's lengths\&.
.RE
.PP
\fBReturn value\fR
.PP
variables with doubleArray objects are set in caller's scope
.PP
.RS -4n
\fBnewDoubleps\fR (::tclopt)
.RE
.PP
Creates doubleps objects, and set these objects to variables
.RS 4n\fBnewDoubleps\fP \fIvarNames\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
varNames
List of variables names\&.
.RE
.PP
\fBReturn value\fR
.PP
variables with doubleps objects are set in caller's scope
.PP
.RS -4n
\fBnewIntArrays\fR (::tclopt)
.RE
.PP
Creates intArray objects, and set these objects to variables
.RS 4n\fBnewIntArrays\fP \fIvarNames lengths\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
varNames
List of variables names\&.
.TP
lengths
List of intArray's lengths\&.
.RE
.PP
\fBReturn value\fR
.PP
variables with intArray objects are set in caller's scope
.PP
.RS -4n
\fBparCreate\fR (::tclopt)
.RE
.RS 4n\fBparCreate\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.RE
.PP
.RS -4n
\fBqfrac\fR (::tclopt)
.RE
.PP
Does QR factorization
.RS 4n\fBqfrac\fP \fI-x list -y list -xi list\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
m
Number of rows of matrix a\&.
.TP
n
Number of columns of matrix a\&.
.TP
a
Matrix of size m by n in form of 1d list \fI[column0] [column1] [column2] \&.\&.\&. [columnn]\fP
.TP
lda
Leading dimension of a\&.
.TP
pivot
True for column pivoting enforcing\&.
.TP
lipvt
A positive integer input variable\&. if pivot is false, then lipvt may be as small as 1\&. if pivot is true, then lipvt must be at least n\&.
.RE
.PP
\fBReturn value\fR
.PP
dictionary

