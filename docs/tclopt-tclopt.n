'\"
'\" '\" Copyright (c) George Yashin
'\"
.TH "tclopt" 3tcl 0\&.1 "tclopt" "Tcl wrapper for C optimization procedures"
.SH NAME
tclopt - Commands in namespace tclopt
.SH SYNOPSIS
\fBmpfit\fP \fI-funct value -m value -xall list -pdata value ?-pars list? ?-ftol value? ?-xtol value? ?-gtol value? ?-stepfactor value? ?-covtol value? ?-maxiter value? ?-maxfev value? ?-epsfcn value? ?-nofinitecheck?\fP
.br
\fBparCreate\fP \fI?-fixed? ?-lowlim value? ?-uplim value? ?-parname value? ?-step value? ?-relstep value? ?-side value? ?-debugder -debugreltol value -debugabstol value?\fP
.br
.SH ::TCLOPT
.SH COMMANDS
.PP
.RS -4n
\fBmpfit\fR (::tclopt)
.RE
.PP
Does least squares fitting using modified Levenberg-Marquardt algorithm\&.
.RS 4n\fBmpfit\fP \fI-funct value -m value -xall list -pdata value ?-pars list? ?-ftol value? ?-xtol value? ?-gtol value? ?-stepfactor value? ?-covtol value? ?-maxiter value? ?-maxfev value? ?-epsfcn value? ?-nofinitecheck?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-covtol
Range tolerance for covariance calculation\&. Value must be of the type float more than zero, default is 1e-14\&.
.TP
-epsfcn
Finite derivative step size\&. Value must be of the type float more than zero, default is 2\&.2204460e-16\&.
.TP
-ftol
Control termination of mpfit\&. Termination occurs when both the actual and predicted relative reductions in the sum of squares are at most ftol\&. Therefore, ftol measures the relative error desired in the sum of squares\&. Value must be of the type float more than zero, default is 1e-10\&.
.TP
-funct
Name of the procedure that should be minimized\&.
.TP
-gtol
Control termination of mpfit\&. Termination occurs when the cosine of the angle between fvec and any column of the jacobian is at most gtol in absolute value\&. Therefore, gtol measures the orthogonality desired between the function vector and the columns of the jacobian\&. Value must be of the type float more than zero, default is 1e-10\&.
.TP
-m
Number of data points\&.
.TP
-maxfev
Control termination of mpfit\&. Termination occurs when the number of calls to funct is at least maxfev by the end of an iteration\&. Value must be the positive integer, default is 0\&. If it equals to 0, number of evaluations is not restricted\&.
.TP
-maxiter
Maximum number of iterations\&. If maxiter equal to 0, then basic error checking is done, and parameter errors/covariances are estimated based on input arameter values, but no fitting iterations are done\&. Value must be the positive integer, default is 200\&.
.TP
-nofinitecheck
Enable check for infinite quantities, default is off\&.
.TP
-pars
List of npar dictionaries specifying constraints, length must be equal to length of xall if provided, optional\&. To specify the dictionary of the right form, use helper procedure ::tclopt::parCreate\&.
.TP
-pdata
List or dictionary that provides private data to funct that is needed to evaluate residuals\&. Usually it contains x and y values lists, but you can provide any data necessary for function residuals evaluation\&. Will be passed upon each function evaluation without modification\&.
.TP
-stepfactor
Used in determining the initial step bound\&. This bound is set to the product of factor and the euclidean norm of diag*x if nonzero, or else to factor itself\&. in most cases factor should lie in the interval (\&.1,100\&.)\&. 100\&. is a generally recommended value\&. Value must be of the type float more than zero, default is 100\&.
.TP
-xall
List of n initial parameter values\&.
.TP
-xtol
Control termination of mpfit\&. Termination occurs when the relative error between two consecutive iterates is at most xtol\&. Therefore, xtol measures the relative error desired in the approximate solution\&. Value must be of the type float more than zero, default is 1e-10\&.
.RE
.PP
\fBDescription\fR
.PP
Procedure uses the Levenberg-Marquardt technique to solve the least-squares problem\&. In its typical use, it will
be used to fit a user-supplied function (the "model") to user-supplied data points (the "data") by adjusting a set
of parameters\&. mpfit is based upon MINPACK-1 (LMDIF\&.F) by More' and collaborators\&.
The user-supplied function should compute an array of weighted deviations between model and data\&. In a typical
scientific problem the residuals should be weighted so that each deviate has a gaussian sigma of 1\&.0\&. If x
represents values of the independent variable, y represents a measurement for each value of x, and err represents
the error in the measurements, then the deviates could be calculated as follows:
.PP
.RS 4n
.nf
for {set i 0} {$i<$m} {incr i} {
    lset deviates $i [expr {([lindex $y $i] - [f [lindex $x $i]])/[lindex $err $i]}]
}
.fi
.RE
.PP
where m is the number of data points, and where f is the function representing the model evaluated at x\&. If ERR
are the 1-sigma uncertainties in Y, then the sum of deviates squared will be the total chi-squared value, which
mpfit will seek to minimize\&.
Simple constraints can be placed on parameter values by using the pars parameter to mpfit, and other
parameter-specific options can be set\&. The right dictionary should be generated using \fI::tclopt::parCreate\fP
procedure, and the elements of the pars list must be provided in the same order as parameters in xall list,
for example, if xall is {par0initVal par1initVal par2initVal}\&. pars list must be of the form
{par0constrDict par1constrDict par2constrDict}\&. For details of how to specify constraints, please look at the
description of \fI::tclopt::parCreate\fP procedure\&.
Example of user defined function (using linear equation t=a+b*x):
.PP
.RS 4n
.nf
proc f {xall pdata args} {
    set x [dget $pdata x]
    set y [dget $pdata y]
    set ey [dget $pdata ey]
    foreach xVal $x yVal $y eyVal $ey {
        set f [= {[@ $xall 0]+[@ $xall 1]*$xVal}]
        lappend fval [= {($yVal-$f)/$eyVal}]
    }
    return [dcreate fvec $fval]
}
.fi
.RE
.PP
where xall is list of initial parameters values, pdata - dictionary that contains x, y and ey lists with length m\&.
It returns dictionary with residuals values\&.
Alternative form of function f could also provide analytical derivatives:
.PP
.RS 4n
.nf
proc quadfunc {xall pdata args} {
    set x [dget $pdata x]
    set y [dget $pdata y]
    set ey [dget $pdata ey]
    foreach xVal $x yVal $y eyVal $ey {
        lappend fvec [= {($yVal-[@ $xall 0]-[@ $xall 1]*$xVal-[@ $xall 2]*$xVal*$xVal)/$eyVal}]
    }
    if {[@ $args 0]!=""} {
        set derivs [@ $args 0]
        foreach deriv $derivs {
            if {$deriv==0} {
                foreach xVal $x yVal $y eyVal $ey {
                    lappend dvec [= {-1/$eyVal}]
                }
            }
            if {$deriv==1} {
                foreach xVal $x yVal $y eyVal $ey {
                    lappend dvec [= {(-$xVal)/$eyVal}]
                }
            }
            if {$deriv==2} {
                foreach xVal $x yVal $y eyVal $ey {
                    lappend dvec [= {(-$xVal*$xVal)/$eyVal}]
                }
            }
        }
        return [dcreate fvec $fvec dvec $dvec]
    } else {
        return [dcreate fvec $fvec]
    }
}
.fi
.RE
.PP
The first element of the args list is a list specifying the ordinal numbers of the parameters for which we need to
calculate the analytical derivative\&. In this case, the returned dvec list contains the derivative at each x point
for each specified parameter, following the same order as in the input list\&. For example, if the input list is
{0, 2} and the number m of x points is 3, the dvec list will look like this:
.PP
.RS 4n
.nf
⎛⎛df ⎞   ⎛df ⎞   ⎛df ⎞   ⎛df ⎞   ⎛df ⎞   ⎛df ⎞  ⎞
⎜⎜───⎟   ⎜───⎟   ⎜───⎟   ⎜───⎟   ⎜───⎟   ⎜───⎟  ⎟
⎜⎝dp0⎠   ⎝dp0⎠   ⎝dp0⎠   ⎝dp2⎠   ⎝dp2⎠   ⎝dp2⎠  ⎟
⎝     x0      x1      x2      x0      x1      x2⎠
.fi
.RE
.PP
Description of keys and data in returned dictionary:
.RS 4n
.TP
-bestnorm
Final chi^2\&.
.TP
-orignorm
Starting value of chi^2\&.
.TP
-status
Fitting status code\&.
.TP
-niter
Number of iterations\&.
.TP
-nfev
Number of function evaluations\&.
.TP
-npar
Total number of parameters\&.
.TP
-nfree
Number of free parameters\&.
.TP
-npegged
Number of pegged parameters\&.
.TP
-nfunc
Number of residuals (= num\&. of data points)
.TP
-resid
List of final residuals\&.
.TP
-xerror
Final parameter uncertainties (1-sigma),
.TP
-x
Final parameters values list\&.
.TP
-debug
String with derivatives debugging output\&.
.TP
-covar
Final parameters covariance matrix\&.
.RE
.PP
\fBReturn value\fR
.PP
dictionary with keya/data described above
.PP
.RS -4n
\fBparCreate\fR (::tclopt)
.RE
.PP
Creates input dictionary for \fI::tclopt::mpfit\fP procedure\&.
.RS 4n\fBparCreate\fP \fI?-fixed? ?-lowlim value? ?-uplim value? ?-parname value? ?-step value? ?-relstep value? ?-side value? ?-debugder -debugreltol value -debugabstol value?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-debugabstol
Absolute error that controls printing of derivatives comparison if absolute error exceeds this value\&. Requires -debugder and -debugreltol\&.
.TP
-debugder
Switch to enable console debug logging of user-computed derivatives, as described above\&. Note that when debugging is enabled, then -side should be set to auto, right, left or both, depending on which numerical derivative you wish to compare to\&. Requires -debugreltol and -debugabstol values\&.
.TP
-debugreltol
Relative error that controls printing of derivatives comparison if relative error exceeds this value\&. Requires -debugder and -debugabstol\&.
.TP
-fixed
Specify that parameter is fixed during optimization, optional\&.
.TP
-lowlim
Specify lower limit for parameter, must be lower than upper limit if upper limit is provided, optional\&.
.TP
-parname
Parameter name, optional\&.
.TP
-relstep
The \fIrelative\fP step size to be used in calculating the numerical derivatives\&. This number is the fractional size of the step, compared to the parameter value\&. This value supercedes the -step setting\&. If the parameter is zero, then a default step size is chosen\&.
.TP
-side
The sidedness of the finite difference when computing numerical derivatives\&. This field can take four values: auto : one-sided derivative computed automatically, right : one-sided derivative (f(x+h)-f(x))/h, left : one-sided derivative (f(x)-f(x-h))/h, both : two-sided derivative (f(x+h)-f(x-h))/(2*h), an : user-computed explicit derivatives, where h is the -step parameter described above\&. The "automatic" one-sided derivative method will chose a direction for the finite difference which does not violate any constraints\&. The other methods do not perform this check\&. The two-sided method is in principle more precise, but requires twice as many function evaluations\&. Default is auto\&.
.TP
-step
The step size to be used in calculating the numerical derivatives\&.  If set to zero, then the step size is computed automatically, optional\&.
.TP
-uplim
Specify upper limit for parameter, must be higher than lower limit if lower limit is provided, optional\&.
.RE
.PP
\fBDescription\fR
.PP
Example of building list of 4 parameters with different constraints:
.PP
.RS 4n
.nf
set par0 [::tclopt::parCreate -fixed]
set par1 [::tclopt::parCreate]
set par2 [::tclopt::parCreate -fixed]
set par3 [::tclopt::parCreate -lowlim -0\&.3 -uplim 0\&.2]
set pars [list $par0 $par1 $par2 $par3]
.fi
.RE

